pipeline {
    agent any

    environment {
        IMAGE_VERSION = "v${env.BUILD_NUMBER}"
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/paripuranam/ott-platform.git'
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    echo "Logging into Docker Hub using stored credentials"
                    // Authenticate to Docker Hub using credentials stored in Jenkins
                    withCredentials([usernamePassword(credentialsId: 'ccdfc633-7ae3-4184-8663-d81ac2d84bd4', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_ACCESS_TOKEN')]) {
                        sh """
                            echo ${DOCKER_ACCESS_TOKEN} | docker login -u ${DOCKER_USERNAME} --password-stdin
                        """
                    }
                    echo "Successfully logged in to Docker Hub"
                    echo "Image Version: ${IMAGE_VERSION}"  // Debugging
                }
            }
        }

        stage('Build and Push Docker Images') {
            parallel {
                stage('Auth Service') {
                    steps {
                        script {
                            echo "Building Docker image for Auth Service"
                            dockerImage = docker.build("${DOCKER_USERNAME}/auth-service:${IMAGE_VERSION}", "./services/auth-service")
                            echo "Pushing Docker image for Auth Service"
                            dockerImage.push()
                        }
                    }
                }

                stage('Auth Frontend') {
                    steps {
                        script {
                            echo "Building Docker image for Auth Frontend"
                            dockerImage = docker.build("${DOCKER_USERNAME}/auth-frontend:${IMAGE_VERSION}", "./services/auth-service/frontend")
                            echo "Pushing Docker image for Auth Frontend"
                            dockerImage.push()
                        }
                    }
                }
                stage('streaming-service'){
                    steps{
                        script{
                            dockerImage = docker.build("${DOCKER_USERNAME}/streaming-service:${IMAGE_VERSION}", "./service/streaming-service")
                            dockerImage.push()
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up workspace"
            cleanWs()
        }

        success {
            echo "Build and push successful"
        }

        failure {
            echo "Build or push failed"
        }
    }
}
